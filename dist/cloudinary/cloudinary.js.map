{"version":3,"file":"cloudinary.js","sourceRoot":"","sources":["../../src/cloudinary/cloudinary.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA8C;AAG9C,eAAU,CAAC,MAAM,CAAC;IACd,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE;IAC7C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE;IAC5C,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,EAAE;CACrD,CAAC,CAAC;AAEH;;;;;GAKG;AACI,MAAM,uBAAuB,GAAG,CACrC,QAAgB,EAChB,MAAe,EACa,EAAE;IAC9B,IAAI,CAAC;QACH,MAAM,OAAO,GAAwB,EAAE,CAAC;QACxC,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QAC1B,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,eAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CACb,yCACG,KAAgC,CAAC,OAAO,IAAI,KAC/C,EAAE,CACH,CAAC;IACJ,CAAC;AACH,CAAC,CAAA,CAAC;AAnBW,QAAA,uBAAuB,2BAmBlC","sourcesContent":["import { v2 as cloudinary } from \"cloudinary\";\nimport { UploadApiResponse, UploadApiErrorResponse } from \"cloudinary\";\n\ncloudinary.config({\n    cloud_name: process.env.CLOUDINARY_NAME || \"\",\n    api_key: process.env.CLOUDINARY_APIKEY || \"\",\n    api_secret: process.env.CLOUDINARY_APISECRET || \"\",\n});\n\n/**\n * Uploads an image to Cloudinary.\n * @param filePath - The local path to the image file to be uploaded.\n * @param folder - The folder in Cloudinary where the image will be stored (optional).\n * @returns A promise that resolves with the Cloudinary upload response or rejects with an error.\n */\nexport const uploadImageToCloudinary = async (\n  filePath: string,\n  folder?: string\n): Promise<UploadApiResponse> => {\n  try {\n    const options: { folder?: string } = {};\n    if (folder) {\n      options.folder = folder;\n    }\n\n    const result = await cloudinary.uploader.upload(filePath, options);\n    return result;\n  } catch (error) {\n    throw new Error(\n      `Failed to upload image to Cloudinary: ${\n        (error as UploadApiErrorResponse).message || error\n      }`\n    );\n  }\n};"]}