{"version":3,"file":"UserController.js","sourceRoot":"","sources":["../../src/controller/UserController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,0DAAkC;AAClC,0DAAkC;AAClC,wDAA8B;AAC9B,gEAA+B;AAE/B,oBAAoB;AACb,MAAM,QAAQ,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC9E,IAAI,CAAC;QACD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE/C,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;YACvC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,4CAA4C,EAAE,CAAC,CAAC;QACvF,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QACtD,IAAI,YAAY,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,oBAAoB;QACpB,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,cAAc,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAE/D,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;QACrE,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAElB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;IACpE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;AACL,CAAC,CAAA,CAAA;AAxBY,QAAA,QAAQ,YAwBpB;AAED,QAAQ;AACD,MAAM,KAAK,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC3E,IAAI,CAAC;QACD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAExC,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,qCAAqC,EAAE,CAAC,CAAC;QACpF,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,KAAK,GAAG,sBAAG,CAAC,IAAI,CAClB,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,EACzC,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,kBAAkB,CAC9C,CAAC;QAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACpF,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;AACL,CAAC,CAAA,CAAA;AA3BY,QAAA,KAAK,SA2BjB;AAED,kBAAkB;AACX,MAAM,cAAc,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;;IACpF,IAAI,CAAC;QACD,MAAM,MAAM,GAAG,MAAC,GAAG,CAAC,IAAuB,0CAAE,EAAE,CAAC;QAChD,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAC9C,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEhC,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6CAA6C,EAAE,CAAC,CAAC;QAC5F,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,MAAM,cAAc,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;QAC/B,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAElB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,CAAC;IACxE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;AACL,CAAC,CAAA,CAAA;AA7BY,QAAA,cAAc,kBA6B1B;AAED,yBAAyB;AAClB,MAAM,cAAc,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;;IACpF,IAAI,CAAC;QACD,MAAM,MAAM,GAAG,MAAC,GAAG,CAAC,IAAuB,0CAAE,EAAE,CAAC;QAEhD,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,cAAI,CAAC,cAAc,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QAEjE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,iCAAM,IAAI,CAAC,QAAQ,EAAE,KAAE,SAAS,IAAG,CAAC;IAC5D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;AACL,CAAC,CAAA,CAAA;AAnBY,QAAA,cAAc,kBAmB1B;AAED,eAAe;AACR,MAAM,WAAW,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;;IACjF,IAAI,CAAC;QACD,MAAM,MAAM,GAAG,MAAC,GAAG,CAAC,IAAuB,0CAAE,EAAE,CAAC;QAChD,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE7D,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;QAC5D,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC7C,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBACzB,IAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAElB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC;AACL,CAAC,CAAA,CAAA;AA3BY,QAAA,WAAW,eA2BvB","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport User from \"../models/User\";\nimport Post from \"../models/Post\"; \nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n// Create a new user\nexport const register = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { username, password, email } = req.body;\n    \n        if (!username || !password || !email) {\n        return res.status(400).json({ message: \"Username, email and password are required.\" });\n        }\n    \n        const existingUser = await User.findOne({ username });\n        if (existingUser) {\n        return res.status(409).json({ message: \"User already exists.\" });\n        }\n\n        // Hash the password\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n    \n        const user = new User({ username, password: hashedPassword, email });\n        await user.save();\n    \n        res.status(201).json({ message: \"User created successfully.\" });\n    } catch (error) {\n        next(error);\n    }\n}\n\n// Login\nexport const login = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { username, password } = req.body;\n\n        if (!username || !password) {\n            return res.status(400).json({ message: \"Username and password are required.\" });\n        }\n\n        const user = await User.findOne({ username });\n        if (!user) {\n            return res.status(404).json({ message: \"User not found.\" });\n        }\n\n        const isMatch = await bcrypt.compare(password, user.password);\n        if (!isMatch) {\n            return res.status(401).json({ message: \"Invalid credentials.\" });\n        }\n\n        const token = jwt.sign(\n            { id: user._id, username: user.username },\n            process.env.SECRETKEY || \"defaultSecretKey\"\n        );\n\n        res.status(200).json({ message: \"Login successful.\", token, userId: user._id });\n    } catch (error) {\n        next(error);\n    }\n}\n\n// Change password\nexport const changePassword = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const userId = (req.user as { id: string })?.id;\n        const { oldPassword, newPassword } = req.body;\n        console.log(\"User ID:\", userId);\n\n        if (!oldPassword || !newPassword) {\n            return res.status(400).json({ message: \"Old password and new password are required.\" });\n        }\n\n        const user = await User.findById(userId);\n        if (!user) {\n            return res.status(404).json({ message: \"User not found.\" });\n        }\n\n        const isMatch = await bcrypt.compare(oldPassword, user.password);\n        if (!isMatch) {\n            return res.status(401).json({ message: \"Old password is incorrect.\" });\n        }\n\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n        user.password = hashedPassword;\n        await user.save();\n\n        res.status(200).json({ message: \"Password changed successfully.\" });\n    } catch (error) {\n        next(error);\n    }\n}\n\n// Get user profile by id\nexport const getUserProfile = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const userId = (req.user as { id: string })?.id;\n\n        if (!userId) {\n            return res.status(400).json({ message: \"User ID is required.\" });\n        }\n\n        const user = await User.findById(userId).select(\"-password\");\n        if (!user) {\n            return res.status(404).json({ message: \"User not found.\" });\n        }\n\n        const postCount = await Post.countDocuments({ user_id: userId });\n\n        res.status(200).json({ ...user.toObject(), postCount });\n    } catch (error) {\n        next(error);\n    }\n}\n\n// Edit profile\nexport const editProfile = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const userId = (req.user as { id: string })?.id;\n        const { email, nick_name, location, bio, avatar } = req.body;\n\n        if (!userId) {\n            return res.status(400).json({ message: \"User ID is required.\" });\n        }\n\n        const user = await User.findById(userId);\n        if (!user) {\n            return res.status(404).json({ message: \"User not found.\" });\n        }\n\n        const updates = { email, nick_name, location, bio, avatar };\n        Object.entries(updates).forEach(([key, value]) => {\n            if (value !== undefined) {\n            (user as any)[key] = value;\n            }\n        });\n\n        await user.save();\n\n        res.status(200).json({ message: \"Profile updated successfully.\", user });\n    } catch (error) {\n        next(error);\n    }\n}"]}