{"version":3,"file":"PostController.js","sourceRoot":"","sources":["../../src/controller/PostController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport Post from \"../models/Post\";\nimport User from \"../models/User\";\nimport mongoose from \"mongoose\";\n\n// Create new post\nexport const createPost = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { spot_name, location, description, fish_type, image } = req.body;\n\n        if (!spot_name || !location || !description || !fish_type) {\n            return res.status(400).json({ message: \"All fields are required except image.\" });\n        }\n\n        const userId = (req.user as { id: string })?.id;\n\n        if (!userId) {\n            return res.status(401).json({ message: \"Unauthorized. User ID is missing.\" });\n        }\n\n        const newPost = new Post({\n            user_id: userId,\n            spot_name,\n            location,\n            description,\n            fish_type,\n            image: image || \"\", \n        });\n\n        const savedPost = await newPost.save();\n\n        res.status(201).json({\n            message: \"Post created successfully.\",\n            post: savedPost,\n        });\n    } catch (error) {\n        next(error); \n    }\n};\n\n//Get all post\nexport const getPosts = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const posts = await Post.find().populate(\"user_id\", \"nick_name avatar username\");\n\n        const formattedData = posts.map((post: any) => ({\n            post_id: post._id,\n            spot_name: post.spot_name,\n            description: post.description,\n            photo_url: post.image,\n            location: post.location,\n            sharedBy: post.user_id?._id || null, \n            date: post.createdAt ? new Date(post.createdAt).toLocaleDateString() : \"N/A\", \n            nick_name: post.user_id?.nick_name || post.user_id?.username || \"Anonymous\", \n            avatar: post.user_id?.avatar || \"https://via.placeholder.com/50\", \n            fish_type: post.fish_type,\n        }));\n\n        res.status(200).json({\n            message: \"Posts retrieved successfully.\",\n            posts: formattedData,\n        });\n    } catch (error) {\n        next(error);\n    }\n};\n\n//Get single post\nexport const getPost = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { postId } = req.params;\n\n        if (!mongoose.Types.ObjectId.isValid(postId)) {\n            return res.status(400).json({ message: \"Invalid post ID.\" });\n        }\n\n        const post = await Post.findById(postId).populate(\"user_id\", \"nick_name avatar username\");\n\n        if (!post) {\n            return res.status(404).json({ message: \"Post not found.\" });\n        }\n\n        const formattedPost = {\n            post_id: post._id,\n            spot_name: post.spot_name,\n            description: post.description,\n            photo_url: post.image,\n            location: post.location,\n            sharedBy: post.user_id?._id || null, \n            date: post.createdAt ? new Date(post.createdAt).toLocaleDateString() : \"N/A\",\n            nick_name: (post.user_id as any)?.nick_name || (post.user_id as any)?.username || \"Anonymous\", \n            avatar: (post.user_id as any)?.avatar || \"https://via.placeholder.com/50\", // Use avatar from User\n            fish_type: post.fish_type,\n        };\n\n        res.status(200).json({\n            message: \"Post retrieved successfully.\",\n            post: formattedPost,\n        });\n    } catch (error) {\n        next(error);\n    }\n};\n\n\n//Delete post\nexport const deletePost = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { postId } = req.params;\n\n        if (!mongoose.Types.ObjectId.isValid(postId)) {\n            return res.status(400).json({ message: \"Invalid post ID.\" });\n        }\n\n        const userId = (req.user as { id: string })?.id;\n\n        if (!userId) {\n            return res.status(401).json({ message: \"Unauthorized. User ID is missing.\" });\n        }\n\n        const post = await Post.findOne({ _id: postId, user_id: userId });\n\n        if (!post) {\n            return res.status(404).json({ message: \"Post not found or you do not have permission to delete it.\" });\n        }\n\n        await Post.deleteOne({ _id: postId });\n\n        res.status(200).json({ message: \"Post deleted successfully.\" });\n    } catch (error) {\n        next(error);\n    }\n};\n\n//Edit post \nexport const editPost = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const { postId } = req.params;\n\n        if (!mongoose.Types.ObjectId.isValid(postId)) {\n            return res.status(400).json({ message: \"Invalid post ID.\" });\n        }\n\n        const { spot_name, location, description, fish_type, image } = req.body;\n\n        const userId = (req.user as { id: string })?.id;\n\n        if (!userId) {\n            return res.status(401).json({ message: \"Unauthorized. User ID is missing.\" });\n        }\n\n        const post = await Post.findOne({ _id: postId, user_id: userId });\n\n        if (!post) {\n            return res.status(404).json({ message: \"Post not found or you do not have permission to edit it.\" });\n        }\n\n        post.spot_name = spot_name || post.spot_name;\n        post.location = location || post.location;\n        post.description = description || post.description;\n        post.fish_type = fish_type || post.fish_type;\n        post.image = image || post.image;\n\n        const updatedPost = await post.save();\n\n        res.status(200).json({\n            message: \"Post updated successfully.\",\n            post: updatedPost,\n        });\n    } catch (error) {\n        next(error);\n    }\n};\n\n//Get user's posts\nexport const getUserPost = async(req:Request, res: Response, next: NextFunction) => {\n    try{\n        const userId = (req.user as { id: string })?.id;\n\n        if (!userId) {\n            return res.status(401).json({ message: \"Unauthorized. User ID is missing.\" });\n        }\n\n        const posts = await Post.find({ user_id: userId }).populate(\"user_id\", \"nick_name avatar username\");\n        const formattedData = posts.map((post: any) => ({\n            post_id: post._id,\n            spot_name: post.spot_name,\n            description: post.description,\n            photo_url: post.image,\n            sharedBy: post.user_id?._id || null, \n            date: post.createdAt ? new Date(post.createdAt).toLocaleDateString() : \"N/A\", \n            nick_name: post.user_id?.nick_name || post.user_id?.username || \"Anonymous\", \n            avatar: post.user_id?.avatar || \"https://via.placeholder.com/50\", \n            fish_type: post.fish_type,\n        }));\n        res.status(200).json({\n            message: \"Posts retrieved successfully.\",\n            posts: formattedData,\n        });\n    }catch (error) {\n        next(error);\n    }\n}\n\n"]}