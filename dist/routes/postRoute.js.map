{"version":3,"file":"postRoute.js","sourceRoot":"","sources":["../../src/routes/postRoute.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA8D;AAC9D,iEAAgH;AAEhH,MAAM,UAAU,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AACpC,MAAM,YAAY,GAAG,CAAC,EAAY,EAAE,EAAE,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAA0B,EAAE,EAAE;IAC/G,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;GAiBG;AAEH;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,+BAAc,EAAE,YAAY,CAAC,2BAAU,CAAC,CAAC,CAAC;AAErE;;;;;;;;;;;;;;;;;;GAkBG;AACH,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,+BAAc,EAAE,YAAY,CAAC,yBAAQ,CAAC,CAAC,CAAC;AAE5D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,+BAAc,EAAE,YAAY,CAAC,4BAAW,CAAC,CAAC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,+BAAc,EAAE,YAAY,CAAC,wBAAO,CAAC,CAAC,CAAC;AAElE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,+BAAc,EAAE,YAAY,CAAC,yBAAQ,CAAC,CAAC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE,+BAAc,EAAE,YAAY,CAAC,2BAAU,CAAC,CAAC,CAAC;AAExE,kBAAe,UAAU,CAAC","sourcesContent":["import express from 'express';\nimport { authMiddleware } from '../middleware/authMiddleware';\nimport { createPost, getPosts, deletePost, editPost, getPost, getUserPost } from '../controller/PostController';\n\nconst postRouter = express.Router();\nconst asyncHandler = (fn: Function) => (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Post:\n *       type: object\n *       properties:\n *         spot_name:\n *           type: string\n *         location:\n *           type: string\n *         description:\n *           type: string\n *         fish_type:\n *           type: string\n *         image:\n *           type: string\n */\n\n/**\n * @swagger\n * /posts/create:\n *   post:\n *     summary: Create a new post\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Post'\n *     responses:\n *       201:\n *         description: Post created successfully\n *       400:\n *         description: Missing required fields\n *       401:\n *         description: Unauthorized\n */\npostRouter.post('/create', authMiddleware, asyncHandler(createPost));\n\n/**\n * @swagger\n * /posts:\n *   get:\n *     summary: Get all posts\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of all posts\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Post'\n */\npostRouter.get('/', authMiddleware, asyncHandler(getPosts));\n\n/**\n * @swagger\n * /posts/user:\n *   get:\n *     summary: Get all posts created by the authenticated user\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of user's posts\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Post'\n *       401:\n *         description: Unauthorized\n */\npostRouter.get('/user', authMiddleware, asyncHandler(getUserPost));\n\n/**\n * @swagger\n * /posts/{postId}:\n *   get:\n *     summary: Get a single post by ID\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: postId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Post retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Post'\n *       400:\n *         description: Invalid post ID\n *       404:\n *         description: Post not found\n */\npostRouter.get('/:postId', authMiddleware, asyncHandler(getPost));\n\n/**\n * @swagger\n * /posts/{postId}:\n *   put:\n *     summary: Edit a post by ID\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: postId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Post'\n *     responses:\n *       200:\n *         description: Post updated successfully\n *       400:\n *         description: Invalid post ID\n *       401:\n *         description: Unauthorized\n *       404:\n *         description: Post not found\n */\npostRouter.put('/:postId', authMiddleware, asyncHandler(editPost));\n\n/**\n * @swagger\n * /posts/{postId}:\n *   delete:\n *     summary: Delete a post by ID\n *     tags:\n *       - Post\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: postId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Post deleted successfully\n *       400:\n *         description: Invalid post ID\n *       401:\n *         description: Unauthorized\n *       404:\n *         description: Post not found\n */\npostRouter.delete('/:postId', authMiddleware, asyncHandler(deletePost));\n\nexport default postRouter;"]}