{"version":3,"file":"commentRoute.js","sourceRoot":"","sources":["../../src/routes/commentRoute.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA8D;AAC9D,uEAAyG;AAEzG,MAAM,aAAa,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEvC,iCAAiC;AACjC,MAAM,YAAY,GAAG,CAAC,EAAY,EAAE,EAAE,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAA0B,EAAE,EAAE;IACjH,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;GAgBG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,+BAAc,EAAE,YAAY,CAAC,iCAAa,CAAC,CAAC,CAAC;AAErE;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,+BAAW,CAAC,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,+BAAc,EAAE,YAAY,CAAC,+BAAW,CAAC,CAAC,CAAC;AAE5E;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE,+BAAc,EAAE,YAAY,CAAC,iCAAa,CAAC,CAAC,CAAC;AAEjF,kBAAe,aAAa,CAAC","sourcesContent":["import express from 'express';\nimport { authMiddleware } from '../middleware/authMiddleware';\nimport { createComment, getComments, editComment, deleteComment } from '../controller/CommentController';\n\nconst commentRouter = express.Router();\n\n// Utility to handle async errors\nconst asyncHandler = (fn: Function) => (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     Comment:\n *       type: object\n *       properties:\n *         postId:\n *           type: string\n *         content:\n *           type: string\n *         user_id:\n *           type: string\n *         createdAt:\n *           type: string\n *           format: date-time\n */\n\n/**\n * @swagger\n * /comments:\n *   post:\n *     summary: Create a new comment\n *     tags:\n *       - Comment\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               postId:\n *                 type: string\n *               content:\n *                 type: string\n *     responses:\n *       201:\n *         description: Comment created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Comment'\n *       400:\n *         description: Missing required fields\n *       401:\n *         description: Unauthorized\n *       404:\n *         description: Post or user not found\n */\ncommentRouter.post('/', authMiddleware, asyncHandler(createComment));\n\n/**\n * @swagger\n * /comments/{postId}:\n *   get:\n *     summary: Get all comments for a specific post\n *     tags:\n *       - Comment\n *     parameters:\n *       - in: path\n *         name: postId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: List of comments for the post\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Comment'\n *       400:\n *         description: Post ID is required\n *       404:\n *         description: Post not found\n */\ncommentRouter.get('/:postId', asyncHandler(getComments));\n\n/**\n * @swagger\n * /comments/{commentId}:\n *   put:\n *     summary: Edit a comment\n *     tags:\n *       - Comment\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: commentId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               content:\n *                 type: string\n *     responses:\n *       200:\n *         description: Comment updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Comment'\n *       400:\n *         description: Missing required fields\n *       401:\n *         description: Unauthorized\n *       404:\n *         description: Comment not found or no permission to edit\n */\ncommentRouter.put('/:commentId', authMiddleware, asyncHandler(editComment));\n\n/**\n * @swagger\n * /comments/{commentId}:\n *   delete:\n *     summary: Delete a comment\n *     tags:\n *       - Comment\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: commentId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Comment deleted successfully\n *       400:\n *         description: Comment ID is required\n *       401:\n *         description: Unauthorized\n *       404:\n *         description: Comment not found or no permission to delete\n */\ncommentRouter.delete('/:commentId', authMiddleware, asyncHandler(deleteComment));\n\nexport default commentRouter;"]}