{"version":3,"file":"cloudinaryRoute.js","sourceRoot":"","sources":["../../src/routes/cloudinaryRoute.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sDAAmE;AACnE,oDAA4B;AAC5B,yDAAmE;AACnE,iEAA8D;AAE9D,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,oCAAoC;AACpC,MAAM,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AACvC,MAAM,MAAM,GAAG,IAAA,gBAAM,EAAC,EAAE,OAAO,EAAE,CAAC,CAAC;AAEnC;;;;;;;;;;;;;GAaG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,MAAM,CAAC,IAAI,CACT,SAAS,EACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EACtB,+BAAc,EACd,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAClD,CAAC,GAAS,EAAE;QACV,IAAI,CAAC;YACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/B,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC;YAE5C,MAAM,MAAM,GAAG,MAAM,IAAA,oCAAuB,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAE/D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,8BAA8B;gBACvC,GAAG,EAAE,MAAM,CAAC,UAAU;gBACtB,SAAS,EAAE,MAAM,CAAC,SAAS;aAC5B,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC,CAAA,CAAC,EAAE,CAAC;AACP,CAAC,CACF,CAAC;AAEF,kBAAe,MAAM,CAAC","sourcesContent":["import express, { Request, Response, NextFunction } from \"express\";\nimport multer from \"multer\";\nimport { uploadImageToCloudinary } from \"../cloudinary/cloudinary\";\nimport { authMiddleware } from '../middleware/authMiddleware'; \n\nconst router = express.Router();\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({});\nconst upload = multer({ storage });\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     UploadResponse:\n *       type: object\n *       properties:\n *         message:\n *           type: string\n *         url:\n *           type: string\n *         public_id:\n *           type: string\n */\n\n/**\n * @swagger\n * /upload:\n *   post:\n *     summary: Upload an image to Cloudinary\n *     tags:\n *       - Cloudinary\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         multipart/form-data:\n *           schema:\n *             type: object\n *             properties:\n *               image:\n *                 type: string\n *                 format: binary\n *               folder:\n *                 type: string\n *                 description: Optional folder name in Cloudinary\n *     responses:\n *       200:\n *         description: Image uploaded successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/UploadResponse'\n *       400:\n *         description: No file uploaded\n *       401:\n *         description: Unauthorized\n *       500:\n *         description: Internal server error\n */\nrouter.post(\n  \"/upload\",\n  upload.single(\"image\"),\n  authMiddleware, \n  (req: Request, res: Response, next: NextFunction) => {\n    (async () => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ message: \"No file uploaded.\" });\n        }\n\n        const filePath = req.file.path; \n        const folder = req.body.folder || undefined; \n\n        const result = await uploadImageToCloudinary(filePath, folder);\n\n        res.status(200).json({\n          message: \"Image uploaded successfully.\",\n          url: result.secure_url,\n          public_id: result.public_id,\n        });\n      } catch (error) {\n        next(error); \n      }\n    })();\n  }\n);\n\nexport default router;"]}