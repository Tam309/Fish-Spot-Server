{"version":3,"file":"userRoute.js","sourceRoot":"","sources":["../../src/routes/userRoute.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,iEAA4G;AAC5G,iEAA8D;AAE9D,MAAM,UAAU,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEpC,iCAAiC;AACjC,MAAM,YAAY,GAAG,CAAC,EAAY,EAAE,EAAE,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAA0B,EAAE,EAAE;IACjH,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AAEH;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,yBAAQ,CAAC,CAAC,CAAC;AAErD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,sBAAK,CAAC,CAAC,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,+BAAc,EAAE,YAAY,CAAC,+BAAc,CAAC,CAAC,CAAC;AAElF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,+BAAc,EAAE,YAAY,CAAC,+BAAc,CAAC,CAAC,CAAC;AAEzE;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,+BAAc,EAAE,YAAY,CAAC,4BAAW,CAAC,CAAC,CAAC;AAEnE,kBAAe,UAAU,CAAC","sourcesContent":["import express from 'express';\nimport { register, login, changePassword, getUserProfile, editProfile } from '../controller/UserController';\nimport { authMiddleware } from '../middleware/authMiddleware';\n\nconst userRouter = express.Router();\n\n// Utility to handle async errors\nconst asyncHandler = (fn: Function) => (req: express.Request, res: express.Response, next: express.NextFunction) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * @swagger\n * components:\n *   schemas:\n *     User:\n *       type: object\n *       properties:\n *         username:\n *           type: string\n *         email:\n *           type: string\n *         password:\n *           type: string\n *     Profile:\n *       type: object\n *       properties:\n *         email:\n *           type: string\n *         nick_name:\n *           type: string\n *         location:\n *           type: string\n *         bio:\n *           type: string\n *         avatar:\n *           type: string\n */\n\n/**\n * @swagger\n * /users/register:\n *   post:\n *     summary: Register a new user\n *     tags:\n *       - User\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/User'\n *     responses:\n *       201:\n *         description: User created successfully\n *       400:\n *         description: Missing required fields\n *       409:\n *         description: User already exists\n */\nuserRouter.post('/register', asyncHandler(register));\n\n/**\n * @swagger\n * /users/login:\n *   post:\n *     summary: Login an existing user\n *     tags:\n *       - User\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/User'\n *     responses:\n *       200:\n *         description: Login successful\n *       400:\n *         description: Missing username or password\n *       404:\n *         description: User not found\n *       401:\n *         description: Invalid credentials\n */\nuserRouter.post('/login', asyncHandler(login));\n\n/**\n * @swagger\n * /users/change-password:\n *   post:\n *     summary: Change password for an authenticated user\n *     tags:\n *       - User\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               oldPassword:\n *                 type: string\n *               newPassword:\n *                 type: string\n *     responses:\n *       200:\n *         description: Password changed successfully\n *       400:\n *         description: Missing old or new password\n *       401:\n *         description: Old password is incorrect\n *       404:\n *         description: User not found\n */\nuserRouter.post('/change-password', authMiddleware, asyncHandler(changePassword));\n\n/**\n * @swagger\n * /users/profile:\n *   get:\n *     summary: Get user profile for an authenticated user\n *     tags:\n *       - User\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: User profile retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 username:\n *                   type: string\n *                 email:\n *                   type: string\n *                 nick_name:\n *                   type: string\n *                 location:\n *                   type: string\n *                 bio:\n *                   type: string\n *                 avatar:\n *                   type: string\n *                 postCount:\n *                   type: integer\n *       400:\n *         description: User ID is required\n *       404:\n *         description: User not found\n */\nuserRouter.get('/profile', authMiddleware, asyncHandler(getUserProfile));\n\n/**\n * @swagger\n * /users/edit:\n *   put:\n *     summary: Edit profile for an authenticated user\n *     tags:\n *       - User\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Profile'\n *     responses:\n *       200:\n *         description: Profile updated successfully\n *       400:\n *         description: User ID is required\n *       404:\n *         description: User not found\n */\nuserRouter.put('/edit', authMiddleware, asyncHandler(editProfile));\n\nexport default userRouter;"]}